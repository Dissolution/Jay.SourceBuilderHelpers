using Jay.EntityGen.Attributes;
using Jay.SourceGen.Code;
using Jay.SourceGen.Extensions;

namespace Jay.EntityGen.CodeGen;

internal static partial class CodeSources
{
    public static bool GenerateComparison(EntityInfo entityInfo, out CodeSource? codeSource)
    {
        var compareMembers = entityInfo.MembersWithAttribute("KeyAttribute");
        if (compareMembers.Count == 0)
        {
            codeSource = null;
            return false;
        }

        using var writer = new CodeWriter();

        string entityType = entityInfo.TypeName;
        string varName = entityInfo.VarName;

        writer.AutoGeneratedHeader()
            .Nullable(true)
            .NewLine()
            .Using("System.Collections.Generic")
            .NewLine()
            .Namespace(entityInfo.NameSpace)
            .NewLine()
            .CodeBlock($$"""
                partial class {{entityType}} : IComparable<{{entityType}}>
                {
                    public static bool operator <({{entityType}} left, {{entityType}} right) => 
                        Comparer<{{entityType}}>.Default.Compare(left, right) < 0;
                
                    public static bool operator <=({{entityType}} left, {{entityType}} right) => 
                        Comparer<{{entityType}}>.Default.Compare(left, right) <= 0;
                    
                    public static bool operator >({{entityType}} left, {{entityType}} right) => 
                        Comparer<{{entityType}}>.Default.Compare(left, right) > 0;
                    
                    public static bool operator >=({{entityType}} left, {{entityType}} right) => 
                        Comparer<{{entityType}}>.Default.Compare(left, right) >= 0;
                    
                    
                    public int CompareTo({{entityType}}? {{varName}})
                    {
                        // Nulls sort first
                        if ({{varName}} == null) return 1;
                        // Compare each Key(Equality) in order
                        int c = 0;
                        {{(CWA)(cw => cw.DelimitLines(compareMembers, (w, m) => w
                            .WriteLine($"c = Comparer<{m.Type}>.Default.Compare(this.{m.Name}, {varName}.{m.Name});")
                            .Write("if (c != 0) return c;")))}}
                        return c;
                    }
                }
                """);

        string code = writer.ToString();
        codeSource = new($"{entityInfo.Type.GetFQN()}.Comparable.g.cs", code);
        return true;
    }

}
