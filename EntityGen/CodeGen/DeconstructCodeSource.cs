using Jay.EntityGen.Attributes;
using Jay.SourceGen.Code;
using Jay.SourceGen.Extensions;

namespace Jay.EntityGen.CodeGen;



internal static partial class CodeSources
{
    public static bool GenerateDeconstruct(EntityInfo entityInfo, out CodeSource? codeSource)
    {
        var equalityMembers = entityInfo.MembersOfKind(KeyKind.Equality);
        if (equalityMembers.Count == 0)
        {
            codeSource = null;
            return false;
        }

        using var writer = new CodeWriter();

        string entityType = entityInfo.TypeName;

        writer.AutoGeneratedHeader()
            .Nullable(true)
            .NewLine()
            .Namespace(entityInfo.NameSpace)
            .NewLine()
            .CodeBlock($$"""
                partial class {{entityType}}
                {
                    public void Deconstruct({{(CWA)(w => w.Delimit(",", equalityMembers,
                            (cw, km) => cw.Write($"out {km.Type} {km.VarName}"))
                        )}})
                    {
                        {{(CWA)(w => w.DelimitLines(equalityMembers,
                                (cw, km) => cw.Write($"{km.VarName} = {km.Name};"))
                            )}}
                    }
                }
                """);

        string code = writer.ToString();
        codeSource = new($"{entityInfo.Type.GetFQN()}.Deconstruction.g.cs", code);
        return true;
    }
}