using Jay.EntityGen.Attributes;
using Jay.SourceGen;

namespace Jay.EntityGen.CodeGen;

internal static class FormattableCodeSource
{
    public static CodeSource Generate(EntityInfo entityInfo)
    {
        using var writer = new CodeWriter();

        string entityType = entityInfo.Name;
        string varName = entityInfo.VarName;

        var displayMembers = entityInfo.FindMembers(KeyKind.Display).ToList();

        writer.AutoGeneratedHeader()
            .Nullable(entityInfo.Nullability)
            .NewLine()
            .Using("System.Collections.Generic")
            .Using("System.Text")
            .NewLine()
            .Namespace(entityInfo.NameSpace)
            .NewLine()
            .CodeBlock($$"""
                partial class {{entityType}} // : IFormattable
                {
                    public string ToString(string? format, IFormatProvider? provider = null)
                    {
                        if (string.IsNullOrWhiteSpace(format)) return ToString();

                        var text = new StringBuilder();
                        text.Append("{{entityType}} { ");
                        {{(CWA)(w => w.DelimitLines(displayMembers,
                        static (cw, m, i) =>
                        {
                            cw.Write("text");
                            if (i > 0)
                            {
                                cw.Write(".Append(\", \")");
                            }
                            cw.Write($".Append(\"{m.Name} = \")");
                            if (m.Type.HasInterface<IFormattable>())
                            {
                                cw.Write($".Append(this.{m.Name}.ToString(format, provider));");
                            }
                            else
                            {
                                cw.Write($".Append(this.{m.Name});");
                            }
                        }))}}
                        text.Append(" }");
                        return text.ToString();
                    }

                    public override string ToString()
                    {
                        return $"{{entityType}} {{"{{"}} {{(CWA)(w => w.Delimit(", ", displayMembers,
                        static (cw, km) => cw.Write($"{km.Name} = {{{km.Name}}}")))}} {{"}}"}}";
                    }
                }
                """);


        string code = writer.ToString();
        return new($"{entityInfo.Type.GetFQN()}.Formattable.g.cs", code);
    }

}
