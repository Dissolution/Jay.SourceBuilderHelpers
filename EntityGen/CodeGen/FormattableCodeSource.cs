using Jay.EntityGen.Attributes;
using Jay.SourceGen.Code;
using Jay.SourceGen.Extensions;

namespace Jay.EntityGen.CodeGen;

internal static partial class CodeSources
{
    public static bool GenerateFormattable(EntityInfo entityInfo, out CodeSource? codeSource)
    {
        var displayMembers = entityInfo.MembersOfKind(KeyKind.Display);
        if (displayMembers.Count == 0)
        {
            codeSource = null;
            return false;
        }

        using var writer = new CodeWriter();

        string entityType = entityInfo.TypeName;
        string varName = entityInfo.VarName;

        writer.AutoGeneratedHeader()
            .Nullable(true)
            .NewLine()
            .Using("System.Collections.Generic")
            .Using("System.Text")
            .NewLine()
            .Namespace(entityInfo.NameSpace)
            .NewLine()
            .CodeBlock($$"""
                partial class {{entityType}} : IFormattable
                {
                    public string ToString(string? format, IFormatProvider? provider = null)
                    {
                        // TODO: Custom format specifiers, check how `record` does it
                        return ToString();
                    }

                    public override string ToString()
                    {
                        return $"{{entityType}} {{"{{"}} {{(CWA)(w => w.Delimit(", ", displayMembers,
                            static (cw, km) => cw.Write($"{km.Name} = {{{km.Name}}}")))}} {{"}}"}}";
                    }
                }
                """);


        string code = writer.ToString();
        codeSource = new($"{entityInfo.Type.GetFQN()}.Formattable.g.cs", code);
        return true;
    }

}
