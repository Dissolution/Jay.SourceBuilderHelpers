using System.Diagnostics;
using System.Reflection;
using Jay.SourceBuilderHelpers.Text;

#if RELEASE
var config = DefaultConfig.Instance
    .AddJob(Job.InProcess
        .WithStrategy(RunStrategy.Throughput)
        .WithRuntime(ClrRuntime.Net461)
        .WithRuntime(CoreRuntime.Core20));

var result = BenchmarkRunner.Run<TextCopyBenchmarks>(config);
var outputPath = result.ResultsDirectoryPath;

//Process.Start(outputPath);
#else


using var codeWriter = new CodeWriter();
/*
codeWriter
    .Using("using System;")
    .WriteLine("namespace Jay.Testing;")
    .WriteLine()
    .WriteLine("public class Testing()")
    .BracketBlock(code =>
    {
        code.Parse(@"public string ToString()
{
    return ""Testing"";
}

")
            .WriteLine("public void DoThing()")
            .BracketBlock(bb =>
            {
                bb.Format(@$"
// Don't do this at home, kids!
int threadId = {Environment.CurrentManagedThreadId};
Console.WriteLine($""{{threadId}}"");");
            }).NewLine();
    }).NewLine();

*/

var method = typeof(Program).GetMethods(BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic)
    .First();

    codeWriter.WriteAutoGeneratedHeader()
    .Using("System")
    .WriteLine($"namespace {method.DeclaringType?.Namespace}")
    .BracketBlock(c => c
        .WriteLine($"public static partial class {method.DeclaringType?.Name}")
        .BracketBlock(c => c
            .WriteLine("static partial void HelloFrom(string name)")
            .BracketBlock(c => c
                .WriteLine("int i = 147;")
                .WriteLine("Console.WriteLine($\"Generator says: Hi from '{name}'  #{i}\");"))));

string code = codeWriter.ToString();

Debugger.Break();



















#endif

