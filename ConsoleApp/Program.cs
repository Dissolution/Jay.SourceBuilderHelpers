using System.Diagnostics;
using System.Drawing;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Text;
using Jay.SourceGen.Reflection;
using Jay.SourceGen.Text;

#if RELEASE
var config = DefaultConfig.Instance
    .AddJob(Job.InProcess
        .WithStrategy(RunStrategy.Throughput)
        .WithRuntime(ClrRuntime.Net461)
        .WithRuntime(CoreRuntime.Core20));

var result = BenchmarkRunner.Run<TextCopyBenchmarks>(config);
var outputPath = result.ResultsDirectoryPath;

//Process.Start(outputPath);
#else
//
//
// using var codeWriter = new CodeWriter();
// /*
// codeWriter
//     .Using("using System;")
//     .WriteLine("namespace Jay.Testing;")
//     .WriteLine()
//     .WriteLine("public class Testing()")
//     .BracketBlock(code =>
//     {
//         code.Parse(@"public string ToString()
// {
//     return ""Testing"";
// }
//
// ")
//             .WriteLine("public void DoThing()")
//             .BracketBlock(bb =>
//             {
//                 bb.Format(@$"
// // Don't do this at home, kids!
// int threadId = {Environment.CurrentManagedThreadId};
// Console.WriteLine($""{{threadId}}"");");
//             }).NewLine();
//     }).NewLine();
//
// */
//
// var method = typeof(Program).GetMethods(BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic)
//     .First();
//
// codeWriter.WriteAutoGeneratedHeader()
//     .Using("System")
//     .WriteLine($"namespace {method.DeclaringType?.Namespace}")
//     .BracketBlock(c => c
//         .WriteLine($"public static partial class {method.DeclaringType?.Name}")
//         .BracketBlock(c => c
//             .WriteLine("static partial void HelloFrom(string name)")
//             .BracketBlock(c => c
//                 .WriteLine("int i = 147;")
//                 .WriteLine("Console.WriteLine($\"Generator says: Hi from '{name}'  #{i}\");"))));
//
//
// IEnumerable<int> enumbable = new List<int> { 1, 2, 3 };
// var str = enumbable.ToString();
//
//
//
// string code = codeWriter.ToString();


string name = TestEnum.Beta.Name();
int flagCount = (TestFlagsEnum.Alpha | TestFlagsEnum.Beta).FlagCount();



Debugger.Break();


#endif


public enum TestEnum
{
    Default,
    Alpha,
    Beta,
    Gamma,
    Delta,
}

[Flags]
public enum TestFlagsEnum
{
    Default = 0,
    Alpha = 1 << 0,
    Beta = 1 << 1,
    Gamma = 1 << 2,
    Delta = 1 << 3,
}

/*
public static class Extensions
{
    public static int GetSetBitCount(long lValue)
    {
        int count = 0;

        //Loop the value while there are still bits
        while (lValue != 0)
        {
            //Remove the end bit
            lValue &= (lValue - 1);

            //Increment the count
            count++;
        }

        //Return the count
        return count;
    }

    public static int FlagCount(TestFlagsEnum testFlagsEnum)
    {
        return GetSetBitCount((long)testFlagsEnum);
    }
}
*/